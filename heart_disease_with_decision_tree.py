# -*- coding: utf-8 -*-
"""Heart Disease with Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n5KFv25RXRg5OBoIPD6NSGPRki_Se1pb
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

# Load the Heart Disease dataset
dataset = 'https://storage.googleapis.com/dqlab-dataset/heart_disease.csv'
heart_data = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/heart_disease.csv')

# Handle missing values
heart_data = heart_data.dropna()

# After reduction
pca = PCA(n_components=9)
heart_data_reduced = pca.fit_transform(heart_data.drop('target', axis=1))

# Standardize the features
scaler = StandardScaler()
heart_data_scaled = scaler.fit_transform(heart_data_reduced)

# Load the Heart Disease dataset
X = heart_data_scaled
y = heart_data['target']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the Decisition Trree model with criterion='gini' and max_depth = 30
model = DecisionTreeClassifier(criterion='gini', max_depth=30)
model.fit(X_train, y_train)

# Function to predict the heart disease
def predict_heart_disease(features):
    features_scaled = scaler.transform(features)
    prediction = model.predict(features_scaled)
    if prediction == 0:
      pred = "No Heart Disease"
      return pred
    else:
      pred = "Yes Heart Disease"
      return pred

ca = 3.0
thal = 2.0
trestbps = 80.0
oldpeak = 3.0
slope = 1.0
restecg = 1.0
exang = 1.0
chol = 80.0
fbs = 1.0

# Prepare input features
input_features = [[ca, thal, trestbps, oldpeak, slope, restecg, exang, chol, fbs]]

# Make prediction
print("Predicted Class:", predict_heart_disease(input_features))